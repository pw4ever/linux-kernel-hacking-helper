#! /bin/bash

_rootdir=${_rootdir:-"$(dirname "$(readlink -f "$0")")"}
_ver="0.0.1-dev"
#_author="Wei Peng <me@1pengw.com>"

source "${_rootdir}/_shared_prologue"

#
# parameters
#
declare -i _instance=${_instance:-1}
declare _target=${_target:-modules}
declare -i _jobs=${_jobs:-$((2+$(nproc)))}
declare _moduleroot=${_moduleroot:-"$(readlink -f $PWD)"}

#
# getopt processing
#
function my_getopt_cont () {
    local n_shift=1 # number of shifts in the outer loop; shift by 1 by default
    case "$1" in
        -i|--instance)
            shift
            _instance=$1
            n_shift=2
            ;;
        -t|--target)
            shift
            _target=$1
            n_shift=2
            ;;
        -j|--jobs)
            shift
            _jobs=$1
            n_shift=2
            ;;
        -m|--moduleroot)
            shift
            _moduleroot=$1
            n_shift=2
            ;;
    esac
    return $n_shift
}

my_getopt "i:t:j:m:" "instance:,target:,jobs:,moduleroot:" "my_getopt_cont" "Make kernel instance." "$(
cat <<END
[-i|--instance=<instance>] [-t|--target=<target>] [-j|--jobs=<jobs>]
    [-m|--moduleroot=<moduleroot>]
END
)" "$(
cat <<END
-i	--instance		Maximal number of kernel instances to prepare (default: $_instance).
-t	--target		Makefile target to make (default: $_target).
-j	--jobs		Number of parallel make jobs (default: $_jobs).
-m	--moduleroot		Root directory of the module, where "Makefile" is found (default: $_moduleroot).
END
)" "$@"
ret=$?
eval set -- "$_getopt"
shift $ret 

# sanity check
vecho 0 <<END
$(
dumpparam <<END1
$(
for name in instance target jobs moduleroot; do
    echo "$name=$(echo $(eval "echo \$_$name"))"
done
)
END1
)
END

build_dir="$LKHH_ARENA/build/$_instance"

[[ -d "$build_dir" ]] || die 1 <<END
ERROR: $build_dir does not exist; consider "lkhh-init -i $_instance" first.
END

moduleroot="$(readlink -f "$_moduleroot")"

[[ -d "$moduleroot" ]] || die 1 <<END
ERROR: $moduleroot does not exist.
END

vecho 0 <<END
make -C "$build_dir" -j "$_jobs" "O=$build_dir" "M=$moduleroot" "$@" "$_target"
END

make -C "$build_dir" -j "$_jobs" "O=$build_dir" "M=$moduleroot" "$@" "$_target"
