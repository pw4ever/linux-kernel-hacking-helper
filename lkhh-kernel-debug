#! /bin/bash

_rootdir=${_rootdir:-"$(dirname "$(readlink -f "$0")")"}
_ver="0.0.1-dev"
#_author="Wei Peng <me@1pengw.com>"

source "${_rootdir}/_shared_prologue"

#
# parameters
#
declare -i _instance=${_instance:-1}
declare _gdbremote=${_gdbtarget:-":1234"}

#
# getopt processing
#
function my_getopt_cont () {
    local n_shift=1 # number of shifts in the outer loop; shift by 1 by default
    case "$1" in
        -i|--instance)
            shift
            _instance=$1
            n_shift=2
            ;;
        -g|--gdbremote)
            shift
            _gdbremote=$1
            n_shift=2
            ;;
    esac
    return $n_shift
}

my_getopt "i:g:" "instance:,gdbremote:" "my_getopt_cont" "Test kernel instance using OS image with QEMU." "$(
cat <<END
[-i|--instance=<instance>] [-g|--gdbremote=<gdbremote>]
END
)" "$(
cat <<END
-i	--instance		Maximal number of kernel instances to prepare (default: $_instance).
-g	--gdbremote		Parameter to GDB's "target remote" command (default: $_gdbremote).
END
)" "$@"
ret=$?
eval set -- "$_getopt"
shift $ret

# sanity check
vecho 0 <<END
$(
dumpparam <<END1
$(
for name in instance gdbremote; do
    echo "$name=$(echo $(eval "echo \$_$name"))"
done
)
END1
)
END

build_dir="$LKHH_ARENA/build/$_instance"
[[ -d "$build_dir" ]] || die 1 <<END
ERROR: $build_dir does not exist; consider "lkhh-init -i $_instance" first.
END

vmlinux_path="$build_dir/vmlinux"

for i in "$vmlinux_path"; do
    [[ -f "$i" ]] || die 1 <<END
ERROR: $i is not an existing regular file.
END
done

vecho 0 <<END
gdb -ex "target remote $_gdbremote" "$vmlinux_path" $*
END

pushd "$build_dir"
gdb -ex "target remote $_gdbremote" "$vmlinux_path" $*
popd
